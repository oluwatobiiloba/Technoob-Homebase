#!/usr/bin/env node

/**
 * Module dependencies.
 */
require('dotenv').config({ path: './.env' });
const config = require('../config/config')[process.env.NODE_ENV || 'development'];
const app = require('../app');
const debug = require('debug')('server:server');
const http = require('http');
const db = require('../utils/db_connector');
const cluster = require('cluster');
const numCPUs = require('os').cpus().length;

if (cluster.isMaster ) {
  console.log(`Master ${process.pid} is running`);
    for (let i = 0; i < numCPUs; i++) {
      cluster.fork();
    }
    cluster.on('exit', (worker, code, signal) => {
      console.log(`Worker ${worker.process.pid} died`);
    });
    

} else {
  console.log(`Worker ${process.pid} started`);
  /**
 * Get port from environment and store in Express.
 */

let port = normalizePort(config.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Connect to database
 */
const initialise_db = async () => {
  db.on('error', console.error.bind(console, 'connection error:'));
  db.once('open', function () {
  });

}
/**
 * Listen on provided port, on all network interfaces.
 */


(async () => {

  await Promise.all([
    initialise_db(),
  ])

  const port = config.PORT;

  // Start listening for incoming connections on specified port and log to console when server has started
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);

})();



/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

}


